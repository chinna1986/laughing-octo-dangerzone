{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"notif",
				"notificationId"
			],
			[
				"reque",
				"RequestPermission"
			],
			[
				"type",
				"typeStr"
			],
			[
				"alb",
				"albumId"
			],
			[
				"max",
				"max-height"
			]
		]
	},
	"buffers":
	[
		{
			"file": "app.py",
			"settings":
			{
				"buffer_size": 5069,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Copyright 2009 FriendFeed\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n$(document).ready(function() {\n    if (!window.console) window.console = {};\n    if (!window.console.log) window.console.log = function() {};\n    var oauth = ChromeExOAuth.initBackgroundPage({\n      'request_url' : 'https://www.google.com/accounts/OAuthGetRequestToken',\n      'authorize_url' : 'https://www.google.com/accounts/OAuthAuthorizeToken',\n      'access_url' : 'https://www.google.com/accounts/OAuthGetAccessToken',\n      'consumer_key' : 'anonymous',\n      'consumer_secret' : 'anonymous',\n      'scope' : 'http://www.google.com/m8/feeds/',\n      'app_name' : 'libnotify2'\n    });\n    oauth.authorize(function(x, y) {\n        console.log(x);\n        console.log(y);\n    });\n    updater.poll();\n});\n\nfunction newMessage(form) {\n    var message = form.formToDict();\n    var disabled = form.find(\"input[type=submit]\");\n    disabled.disable();\n    $.postJSON(\"http://localhost:8888/a/message/new\", message, function(response) {\n        updater.showMessage(response);\n        if (message.id) {\n            form.parent().remove();\n        } else {\n            form.find(\"input[type=text]\").val(\"\").select();\n            disabled.enable();\n        }\n    });\n}\n\nfunction getCookie(name) {\n    var r = document.cookie.match(\"\\\\b\" + name + \"=([^;]*)\\\\b\");\n    return r ? r[1] : undefined;\n}\n\njQuery.postJSON = function(url, args, callback) {\n    args._xsrf = getCookie(\"_xsrf\");\n    $.ajax({url: url, data: $.param(args), dataType: \"text\", type: \"POST\",\n            success: function(response) {\n        if (callback) callback(eval(\"(\" + response + \")\"));\n    }, error: function(response) {\n        console.log(\"ERROR:\", response)\n    }});\n};\n\njQuery.fn.formToDict = function() {\n    var fields = this.serializeArray();\n    var json = {}\n    for (var i = 0; i < fields.length; i++) {\n        json[fields[i].name] = fields[i].value;\n    }\n    if (json.next) delete json.next;\n    return json;\n};\n\njQuery.fn.disable = function() {\n    this.enable(false);\n    return this;\n};\n\njQuery.fn.enable = function(opt_enable) {\n    if (arguments.length && !opt_enable) {\n        this.attr(\"disabled\", \"disabled\");\n    } else {\n        this.removeAttr(\"disabled\");\n    }\n    return this;\n};\n\nvar updater = {\n    errorSleepTime: 500,\n    cursor: null,\n\n    poll: function() {\n        //var args = {\"_xsrf\": getCookie(\"_xsrf\")};\n        var args = {};\n        if (updater.cursor) args.cursor = updater.cursor;\n        $.ajax({url: \"http://localhost:8888/a/message/updates\", type: \"POST\", dataType: \"text\",\n                data: $.param(args), success: updater.onSuccess,\n                error: updater.onError});\n    },\n\n    onSuccess: function(response) {\n        try {\n            var obj = JSON.parse(response);\n            updater.notify(obj.messages[0].from, obj.messages[0].body);\n        } catch (e) {\n            updater.onError();\n            return;\n        }\n        updater.errorSleepTime = 500;\n        window.setTimeout(updater.poll, 0);\n    },\n\n    onError: function(response) {\n        updater.errorSleepTime *= 2;\n        console.log(\"Poll error; sleeping for\", updater.errorSleepTime, \"ms\");\n        window.setTimeout(updater.poll, updater.errorSleepTime);\n    },\n\n    newMessages: function(response) {\n        if (!response.messages) return;\n        updater.cursor = response.cursor;\n        var messages = response.messages;\n        updater.cursor = messages[messages.length - 1].id;\n        console.log(messages.length, \"new messages, cursor:\", updater.cursor);\n        for (var i = 0; i < messages.length; i++) {\n            updater.showMessage(messages[i]);\n        }   \n    },\n\n    showMessage: function(message) {\n        var existing = $(\"#m\" + message.id);\n        if (existing.length > 0) return;\n        var node = $(message.html);\n        node.hide();\n        //$(\"#inbox\").append(node);\n        //node.slideDown();\n        updater.notify(\"new message\", message);\n    },\n\n\n    notify: function(title, message, iconUrl){\n      iconUrl = typeof iconUrl !== 'undefined' ? iconUrl : \"icon.png\"; \n      chrome.notifications.create(\"\", {\n        \"type\": \"basic\", \n        \"iconUrl\": iconUrl,\n        \"title\": title, \n        \"message\": message\n      }, function(){});\n    }\n};",
			"file": "desktop/chat.js",
			"file_size": 4771,
			"file_write_time": 130429077781627556,
			"settings":
			{
				"buffer_size": 4774,
				"line_ending": "Unix"
			}
		},
		{
			"file": "desktop/chat.css",
			"settings":
			{
				"buffer_size": 988,
				"line_ending": "Unix"
			}
		},
		{
			"file": "desktop/manifest.json",
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"file": "desktop/index.html",
			"settings":
			{
				"buffer_size": 476,
				"line_ending": "Unix"
			}
		},
		{
			"file": "desktop/popup.js",
			"settings":
			{
				"buffer_size": 293,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app.conf",
			"settings":
			{
				"buffer_size": 66,
				"line_ending": "Unix"
			}
		},
		{
			"file": "conf.ini",
			"settings":
			{
				"buffer_size": 111,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 180.0,
		"selected_items":
		[
			[
				"java",
				"Set Syntax: JavaScript"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"git",
				"Github: Repository"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 114.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/thomas/libnotify2/templates/index.html",
		"/home/thomas/libnotify2/templates/message.html",
		"/home/thomas/libnotify2/manifest",
		"/home/thomas/libnotify2/desktop/popup.html",
		"/home/thomas/libnotify2/__init__.py",
		"/home/thomas/headphones/headphones/api.py",
		"/home/thomas/pi-app/templates/index.mako",
		"/home/thomas/pi-app/data.py",
		"/home/thomas/jsonrpclib/jsonrpclib/jsonrpc.py",
		"/home/thomas/pi-app/templates/css/style.css",
		"/home/thomas/pi-app/js/functions.js",
		"/home/thomas/pi-app/app.py",
		"/home/thomas/pi-app/__init__.py",
		"/home/thomas/pi-app/templates/base.mako",
		"/home/thomas/pi-app/templates/second.mako",
		"/home/thomas/pi-app/templates/third.mako",
		"/home/thomas/pi-app/index.py",
		"/home/thomas/pi-app/templates/functions.mako",
		"/home/thomas/pi-app/html/style.css",
		"/home/thomas/pi-app/html/index.html",
		"/home/thomas/pi-app/html/base.html",
		"/home/thomas/pi-app/html/css/style.css",
		"/home/thomas/pi-app/css/style.css"
	],
	"find":
	{
		"height": 120.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"# to_basestring is necessary for Python 3's json encoder,\n        # which doesn't accept byte strings.\n        message[\"html\"] = tornado.escape.to_basestring(\n            self.render_string(\"message.html\", message=message))\n        if self.get_argument(\"next\", None):\n            self.redirect(self.get_argument(\"next\"))\n        else:\n            self.write(message)",
			"get_authenticated_user",
			" ",
			"%20",
			" "
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5069,
						"regions":
						{
						},
						"selection":
						[
							[
								4408,
								4408
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1482.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "desktop/chat.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4774,
						"regions":
						{
						},
						"selection":
						[
							[
								4167,
								4167
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1170.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "desktop/chat.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 988,
						"regions":
						{
						},
						"selection":
						[
							[
								988,
								988
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close"
							],
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "desktop/manifest.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close"
							],
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "desktop/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 476,
						"regions":
						{
						},
						"selection":
						[
							[
								237,
								237
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "desktop/popup.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 293,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "app.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66,
						"regions":
						{
						},
						"selection":
						[
							[
								66,
								66
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "conf.ini",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 111,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								35
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "libnotify2.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/pi-app/pi-app.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 209.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
